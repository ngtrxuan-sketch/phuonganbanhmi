import streamlit as st
import pandas as pd
import numpy as np
import numpy_financial as npf # Th∆∞ vi·ªán chu·∫©n cho c√°c h√†m t√†i ch√≠nh (NPV, IRR)
import json
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh Gi√° D·ª± √Ån Kinh Doanh (AI-Powered)",
    layout="wide"
)

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° D·ª± √°n Kinh doanh üí∞")
st.markdown("S·ª≠ d·ª•ng AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu, t√≠nh to√°n d√≤ng ti·ªÅn v√† ƒë√°nh gi√° hi·ªáu qu·∫£ ƒë·∫ßu t∆∞ (NPV, IRR, PP, DPP).")

# --- UI Sidebar: C·∫•u h√¨nh v√† API Key ---
with st.sidebar:
    st.header("C·∫•u h√¨nh API & D·ªØ li·ªáu")
    # L·∫•y API Key t·ª´ Streamlit Secrets ho·∫∑c input c·ªßa ng∆∞·ªùi d√πng
    api_key = st.text_input("Nh·∫≠p Kh√≥a API Gemini:", type="password", help="Vui l√≤ng nh·∫≠p kh√≥a API c·ªßa b·∫°n.")
    
    if api_key and not api_key.startswith('sk-'):
        st.warning("ƒê·ªãnh d·∫°ng Kh√≥a API c√≥ v·∫ª kh√¥ng ƒë√∫ng.")
    
    # ƒê·ªãnh nghƒ©a c·∫•u tr√∫c JSON mong mu·ªën cho AI
    JSON_SCHEMA = {
        "type": "object",
        "properties": {
            "V·ªën ƒë·∫ßu t∆∞ (VND)": {"type": "number", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu c·ªßa d·ª± √°n."},
            "D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)": {"type": "integer", "description": "S·ªë nƒÉm ho·∫°t ƒë·ªông c·ªßa d·ª± √°n."},
            "Doanh thu h√†ng nƒÉm (VND)": {"type": "number", "description": "T·ªïng doanh thu ∆∞·ªõc t√≠nh h√†ng nƒÉm."},
            "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (VND)": {"type": "number", "description": "T·ªïng chi ph√≠ ho·∫°t ƒë·ªông ∆∞·ªõc t√≠nh h√†ng nƒÉm (ch∆∞a bao g·ªìm thu·∫ø, kh·∫•u hao)."},
            "WACC (chi·∫øt kh·∫•u)": {"type": "number", "description": "T·ª∑ l·ªá chi ph√≠ v·ªën b√¨nh qu√¢n (d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª•: 0.10 cho 10%)."},
            "Thu·∫ø su·∫•t": {"type": "number", "description": "Thu·∫ø su·∫•t thu nh·∫≠p doanh nghi·ªáp (d·∫°ng th·∫≠p ph√¢n, v√≠ d·ª•: 0.20 cho 20%)."}
        },
        "required": [
            "V·ªën ƒë·∫ßu t∆∞ (VND)", "D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)", 
            "Doanh thu h√†ng nƒÉm (VND)", "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (VND)", 
            "WACC (chi·∫øt kh·∫•u)", "Thu·∫ø su·∫•t"
        ]
    }
    
    # Textarea ƒë·ªÉ ng∆∞·ªùi d√πng d√°n n·ªôi dung t·ª´ file Word
    project_text = st.text_area(
        "1. D√°n n·ªôi dung d·ª± √°n kinh doanh (t·ª´ file Word) v√†o ƒë√¢y:", 
        height=300,
        placeholder="Vui l√≤ng d√°n to√†n b·ªô n·ªôi dung t√†i li·ªáu d·ª± √°n v√†o ƒë√¢y ƒë·ªÉ AI tr√≠ch xu·∫•t d·ªØ li·ªáu."
    )
    
    st.info("ƒê·ªÉ ƒë·∫£m b·∫£o ƒë·ªô tin c·∫≠y, ·ª©ng d·ª•ng y√™u c·∫ßu b·∫°n d√°n n·ªôi dung vƒÉn b·∫£n t·ª´ file Word.")


# --- H√†m g·ªçi AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu (Ch·ª©c nƒÉng 1) ---
@st.cache_data(show_spinner=False)
def extract_financial_data(text_input, api_key):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ tr√≠ch xu·∫•t c√°c tham s·ªë t√†i ch√≠nh c·ªët l√µi v√† tr·∫£ v·ªÅ d·∫°ng JSON."""
    if not api_key:
        st.error("L·ªói: Vui l√≤ng cung c·∫•p Kh√≥a API Gemini.")
        return None
        
    try:
        client = genai.Client(api_key=api_key)
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr√≠ch xu·∫•t 6 tham s·ªë t√†i ch√≠nh c·ªët l√µi sau t·ª´ vƒÉn b·∫£n d·ª± √°n ƒë∆∞·ª£c cung c·∫•p.
        
        VƒÉn b·∫£n ƒë·∫ßu v√†o:
        ---
        {text_input}
        ---
        
        Vui l√≤ng ƒë·∫£m b·∫£o c√°c gi√° tr·ªã:
        - L√† s·ªë, kh√¥ng c√≥ k√Ω hi·ªáu ti·ªÅn t·ªá (VND, $...).
        - WACC v√† Thu·∫ø su·∫•t ph·∫£i l√† s·ªë th·∫≠p ph√¢n (v√≠ d·ª•: 10% l√† 0.10).
        - Tr·∫£ v·ªÅ k·∫øt qu·∫£ CH·ªà d∆∞·ªõi d·∫°ng JSON tu√¢n th·ªß c·∫•u tr√∫c ƒë√£ cho. N·∫øu kh√¥ng t√¨m th·∫•y, h√£y c·ªë g·∫Øng ∆∞·ªõc l∆∞·ª£ng h·ª£p l√Ω ho·∫∑c ghi nh·∫≠n 0 n·∫øu kh√¥ng th·ªÉ ∆∞·ªõc l∆∞·ª£ng.
        """
        
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            config={"response_mime_type": "application/json", "response_schema": JSON_SCHEMA}
        )
        
        # X·ª≠ l√Ω chu·ªói JSON ƒë·∫ßu ra (ƒë√¥i khi AI c√≥ th·ªÉ th√™m k√Ω t·ª± th·ª´a)
        json_text = response.text.strip()
        data = json.loads(json_text)
        return data

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói: AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi n·ªôi dung d·ª± √°n r√µ r√†ng h∆°n.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None

# --- H√†m t√≠nh to√°n c√°c ch·ªâ s·ªë (Ch·ª©c nƒÉng 3) ---
def calculate_project_metrics(df_cashflow, WACC, investment):
    """T√≠nh to√°n NPV, IRR, PP v√† DPP."""
    
    cashflows = df_cashflow['D√≤ng ti·ªÅn r√≤ng (NCF)'].tolist()
    
    # 1. NPV v√† IRR
    try:
        npv_value = npf.npv(WACC, cashflows)
        # npf.irr y√™u c·∫ßu d√≤ng ti·ªÅn b·∫Øt ƒë·∫ßu b·∫±ng kho·∫£n ƒë·∫ßu t∆∞ √¢m (index 0)
        irr_value = npf.irr(cashflows)
    except Exception:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p IRR kh√¥ng th·ªÉ t√≠nh to√°n (v√≠ d·ª•: d√≤ng ti·ªÅn ch·ªâ c√≥ l·ªó)
        npv_value = np.nan
        irr_value = np.nan
        
    # 2. PP (Payback Period) - Th·ªùi gian ho√†n v·ªën
    cumulative_cf = np.cumsum(cashflows)
    payback_period = np.nan
    for i in range(1, len(cumulative_cf)):
        if cumulative_cf[i] >= 0:
            # NƒÉm cu·ªëi c√πng tr∆∞·ªõc khi ho√†n v·ªën (c√≥ d√≤ng ti·ªÅn √¢m)
            year_before = i - 1
            # Kho·∫£n ch∆∞a ho√†n v·ªën v√†o cu·ªëi nƒÉm tr∆∞·ªõc
            unrecovered_amount = -cumulative_cf[year_before]
            # NCF c·ªßa nƒÉm ho√†n v·ªën
            cf_of_payback_year = cashflows[i]
            # T√≠nh th·ªùi gian ho√†n v·ªën
            payback_period = year_before + (unrecovered_amount / cf_of_payback_year)
            break

    # 3. DPP (Discounted Payback Period) - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u
    discounted_cf = [cf / ((1 + WACC) ** t) for t, cf in enumerate(cashflows)]
    cumulative_dcf = np.cumsum(discounted_cf)
    discounted_payback_period = np.nan
    for i in range(1, len(cumulative_dcf)):
        if cumulative_dcf[i] >= 0:
            year_before = i - 1
            unrecovered_amount = -cumulative_dcf[year_before]
            dcf_of_payback_year = discounted_cf[i]
            discounted_payback_period = year_before + (unrecovered_amount / dcf_of_payback_year)
            break
            
    return {
        "NPV": npv_value,
        "IRR": irr_value,
        "PP": payback_period,
        "DPP": discounted_payback_period
    }

# --- H√†m g·ªçi AI ƒë·ªÉ ph√¢n t√≠ch ch·ªâ s·ªë (Ch·ª©c nƒÉng 4) ---
@st.cache_data(show_spinner=False)
def get_ai_analysis(metrics_data, WACC, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë v√† WACC cho Gemini ƒë·ªÉ ph√¢n t√≠ch."""
    if not api_key:
        return "L·ªói: Vui l√≤ng cung c·∫•p Kh√≥a API Gemini."
        
    try:
        client = genai.Client(api_key=api_key)
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch ƒë·∫ßu t∆∞ v√† ra quy·∫øt ƒë·ªãnh. H√£y ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau:
        
        - NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng): {metrics_data['NPV']:,.0f} VND
        - IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi t·∫°i): {metrics_data['IRR'] * 100:.2f}%
        - WACC (T·ª∑ l·ªá chi·∫øt kh·∫•u): {WACC * 100:.2f}%
        - PP (Th·ªùi gian ho√†n v·ªën): {metrics_data['PP']:.2f} nƒÉm
        - DPP (Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u): {metrics_data['DPP']:.2f} nƒÉm
        
        D·ª±a tr√™n d·ªØ li·ªáu tr√™n:
        1. ƒê∆∞a ra Quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ (Ch·∫•p nh·∫≠n/T·ª´ ch·ªëi) v√† gi·∫£i th√≠ch d·ª±a tr√™n NPV v√† IRR so v·ªõi WACC.
        2. ƒê√°nh gi√° t√≠nh thanh kho·∫£n c·ªßa d·ª± √°n (th·ªùi gian thu h·ªìi v·ªën).
        3. ƒê∆∞a ra nh·∫≠n x√©t t·ªïng th·ªÉ, t·∫≠p trung v√†o r·ªßi ro v√† khuy·∫øn ngh·ªã.
        
        H√£y vi·∫øt b√†i ph√¢n t√≠ch chuy√™n nghi·ªáp, s√∫c t√≠ch (kho·∫£ng 4-5 ƒëo·∫°n).
        """
        
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ph√¢n t√≠ch: {e}"


# --- Logic Ch√≠nh c·ªßa ·ª®ng d·ª•ng ---
if st.sidebar.button("‚ñ∂Ô∏è 1. L·ªçc d·ªØ li·ªáu v√† X√¢y d·ª±ng D√≤ng ti·ªÅn"):
    if not api_key or not project_text:
        st.error("Vui l√≤ng nh·∫≠p Kh√≥a API v√† d√°n n·ªôi dung d·ª± √°n kinh doanh.")
    else:
        st.session_state['ai_data'] = None
        st.session_state['metrics'] = None
        
        with st.spinner('ƒêang g·ª≠i vƒÉn b·∫£n d·ª± √°n cho AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu c·ªët l√µi...'):
            extracted_data = extract_financial_data(project_text, api_key)
            
        if extracted_data:
            st.session_state['ai_data'] = extracted_data
            
            V0 = extracted_data.get("V·ªën ƒë·∫ßu t∆∞ (VND)", 0)
            N = extracted_data.get("D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)", 0)
            R = extracted_data.get("Doanh thu h√†ng nƒÉm (VND)", 0)
            C = extracted_data.get("Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (VND)", 0)
            T = extracted_data.get("Thu·∫ø su·∫•t", 0.2)
            
            # --- Ch·ª©c nƒÉng 2: X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn ---
            st.subheader("2. B·∫£ng D√≤ng ti·ªÅn R√≤ng (Net Cash Flow - NCF)")
            
            # Gi·∫£ ƒë·ªãnh: Thu·∫ø su·∫•t √°p d·ª•ng cho L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (R - C)
            # Kh·∫•u hao = 0 ƒë·ªÉ ƒë∆°n gi·∫£n, NCF = L·ª£i nhu·∫≠n sau thu·∫ø + Kh·∫•u hao (t·ª©c l√† L·ª£i nhu·∫≠n sau thu·∫ø)
            NCF_annual = (R - C) * (1 - T)
            
            if N <= 0:
                 st.error("L·ªói: D√≤ng ƒë·ªùi d·ª± √°n ph·∫£i l·ªõn h∆°n 0.")
            else:
                years = list(range(N + 1))
                data = {
                    'NƒÉm': years,
                    'Doanh thu': [0] + [R] * N,
                    'Chi ph√≠': [0] + [C] * N,
                    'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)': [0] + [R - C] * N,
                    'Thu·∫ø (T)': [0] + [(R - C) * T] * N,
                    'D√≤ng ti·ªÅn r√≤ng (NCF)': [-V0] + [NCF_annual] * N
                }
                df_cashflow = pd.DataFrame(data)
                
                # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã
                df_cashflow_display = df_cashflow.copy()
                for col in ['Doanh thu', 'Chi ph√≠', 'L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø (EBT)', 'Thu·∫ø (T)', 'D√≤ng ti·ªÅn r√≤ng (NCF)']:
                    df_cashflow_display[col] = df_cashflow_display[col].apply(lambda x: f"{x:,.0f}" if x is not None else 'N/A')
                
                st.dataframe(df_cashflow_display, hide_index=True, use_container_width=True)
                
                st.session_state['df_cashflow'] = df_cashflow
                st.session_state['financial_params'] = extracted_data
                st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu v√† x√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn th√†nh c√¥ng!")


# --- Giai ƒëo·∫°n 3: T√≠nh to√°n v√† Ph√¢n t√≠ch ---
if 'df_cashflow' in st.session_state:
    
    WACC = st.session_state['financial_params'].get("WACC (chi·∫øt kh·∫•u)", 0)
    V0 = st.session_state['financial_params'].get("V·ªën ƒë·∫ßu t∆∞ (VND)", 0)
    
    st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
    
    # T√≠nh to√°n c√°c ch·ªâ s·ªë
    metrics = calculate_project_metrics(st.session_state['df_cashflow'], WACC, V0)
    st.session_state['metrics'] = metrics
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", 
            value=f"{metrics['NPV']:,.0f} VND" if not np.isnan(metrics['NPV']) else "Kh√¥ng x√°c ƒë·ªãnh"
        )
    with col2:
        st.metric(
            label="IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi t·∫°i)", 
            value=f"{metrics['IRR'] * 100:.2f} %" if not np.isnan(metrics['IRR']) else "Kh√¥ng x√°c ƒë·ªãnh"
        )
    with col3:
        st.metric(
            label="PP (Th·ªùi gian ho√†n v·ªën)", 
            value=f"{metrics['PP']:.2f} nƒÉm" if not np.isnan(metrics['PP']) else "Kh√¥ng ho√†n v·ªën"
        )
    with col4:
        st.metric(
            label="DPP (Th·ªùi gian ho√†n v·ªën CK)", 
            value=f"{metrics['DPP']:.2f} nƒÉm" if not np.isnan(metrics['DPP']) else "Kh√¥ng ho√†n v·ªën"
        )
        
    st.write(f"**WACC (Chi ph√≠ v·ªën):** {WACC * 100:.2f} %")
    st.write(f"**V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (V0):** {V0:,.0f} VND")
    

    # --- Ch·ª©c nƒÉng 4: Ph√¢n t√≠ch AI ---
    st.subheader("4. Ph√¢n t√≠ch Chuy√™n s√¢u v·ªÅ Hi·ªáu qu·∫£ D·ª± √°n (AI)")
    
    if st.button("‚ñ∂Ô∏è Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£", type="primary"):
        if 'metrics' in st.session_state and not np.isnan(st.session_state['metrics']['NPV']):
            with st.spinner('ƒêang g·ª≠i ch·ªâ s·ªë v√† ch·ªù Gemini AI ƒë√°nh gi√°...'):
                ai_result = get_ai_analysis(st.session_state['metrics'], WACC, api_key)
                st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                st.info(ai_result)
        else:
            st.warning("Vui l√≤ng th·ª±c hi·ªán b∆∞·ªõc 'L·ªçc d·ªØ li·ªáu v√† X√¢y d·ª±ng D√≤ng ti·ªÅn' tr∆∞·ªõc.")
            
# --- T√¨nh tr·∫°ng ban ƒë·∫ßu ---
if 'df_cashflow' not in st.session_state:
    st.info("B·∫Øt ƒë·∫ßu b·∫±ng c√°ch nh·∫≠p Kh√≥a API v√† d√°n n·ªôi dung d·ª± √°n kinh doanh v√†o sidebar, sau ƒë√≥ nh·∫•n n√∫t **'L·ªçc d·ªØ li·ªáu v√† X√¢y d·ª±ng D√≤ng ti·ªÅn'**.")
